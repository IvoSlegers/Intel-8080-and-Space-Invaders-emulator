#pragma once

#include "int_types.hpp"
#include "to_hex_string.hpp"

#include <string>

namespace emulator
{
    const std::string nmemonics[] = {
        "NOP",
        "LXI",
        "STAX",
        "INX",
        "INR",
        "DCR",
        "MVI",
        "RLC",
        "*NOP",
        "DAD",
        "LDAX",
        "DCX",
        "INR",
        "DCR",
        "MVI",
        "RRC",
        "*NOP",
        "LXI",
        "STAX",
        "INX",
        "INR",
        "DCR",
        "MVI",
        "RAL",
        "*NOP",
        "DAD",
        "LDAX",
        "DCX",
        "INR",
        "DCR",
        "MVI",
        "RAR",
        "*NOP",
        "LXI",
        "SHLD",
        "INX",
        "INR",
        "DCR",
        "MVI",
        "DAA",
        "*NOP",
        "DAD",
        "LHLD",
        "DCX",
        "INR",
        "DCR",
        "MVI",
        "CMA",
        "*NOP",
        "LXI",
        "STA",
        "INX",
        "INR",
        "DCR",
        "MVI",
        "STC",
        "*NOP",
        "DAD",
        "LDA",
        "DCX",
        "INR",
        "DCR",
        "MVI",
        "CMC",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "HLT",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "MOV",
        "ADD",
        "ADD",
        "ADD",
        "ADD",
        "ADD",
        "ADD",
        "ADD",
        "ADD",
        "ADC",
        "ADC",
        "ADC",
        "ADC",
        "ADC",
        "ADC",
        "ADC",
        "ADC",
        "SUB",
        "SUB",
        "SUB",
        "SUB",
        "SUB",
        "SUB",
        "SUB",
        "SUB",
        "SBB",
        "SBB",
        "SBB",
        "SBB",
        "SBB",
        "SBB",
        "SBB",
        "SBB",
        "ANA",
        "ANA",
        "ANA",
        "ANA",
        "ANA",
        "ANA",
        "ANA",
        "ANA",
        "XRA",
        "XRA",
        "XRA",
        "XRA",
        "XRA",
        "XRA",
        "XRA",
        "XRA",
        "ORA",
        "ORA",
        "ORA",
        "ORA",
        "ORA",
        "ORA",
        "ORA",
        "ORA",
        "CMP",
        "CMP",
        "CMP",
        "CMP",
        "CMP",
        "CMP",
        "CMP",
        "CMP",
        "RNZ",
        "POP",
        "JNZ",
        "JMP",
        "CNZ",
        "PUSH",
        "ADI",
        "RST",
        "RZ",
        "RET",
        "JZ",
        "*JMP",
        "CZ",
        "CALL",
        "ACI",
        "RST",
        "RNC",
        "POP",
        "JNC",
        "OUT",
        "CNC",
        "PUSH",
        "SUI",
        "RST",
        "RC",
        "*RET",
        "JC",
        "IN",
        "CC",
        "CALL",
        "SBI",
        "RST",
        "RPO",
        "POP",
        "JPO",
        "XTHL",
        "CPO",
        "PUSH",
        "ANI",
        "RST",
        "RPE",
        "PCHL",
        "JPE",
        "XCHG",
        "CPE",
        "CALL",
        "XRI",
        "RST",
        "RP",
        "POP",
        "JP",
        "DI",
        "CP",
        "PUSH",
        "ORI",
        "RST",
        "RM",
        "SPHL",
        "JM",
        "EI",
        "CM",
        "CALL",
        "CPI",
        "RST"
    };

    const std::string arguments[] = {
        "",
        "B, wwww",
        "B",
        "B",
        "B",
        "B",
        "B, bb",
        "",
        "",
        "B",
        "B",
        "B",
        "C",
        "C",
        "C, bb",
        "",
        "",
        "D, wwww",
        "D",
        "D",
        "D",
        "D",
        "D, bb",
        "",
        "",
        "D",
        "D",
        "D",
        "E",
        "E",
        "E, bb",
        "",
        "",
        "H, wwww",
        "wwww",
        "H",
        "H",
        "H",
        "H, bb",
        "",
        "",
        "H",
        "wwww",
        "H",
        "L",
        "L",
        "L, bb",
        "",
        "",
        "SP, wwww",
        "wwww",
        "SP",
        "M",
        "M",
        "M, bb",
        "",
        "",
        "SP",
        "wwww",
        "SP",
        "A",
        "A",
        "A, bb",
        "",
        "B, B",
        "B, C",
        "B, D",
        "B, E",
        "B, H",
        "B, L",
        "B, M",
        "B, A",
        "C, B",
        "C, C",
        "C, D",
        "C, E",
        "C, H",
        "C, L",
        "C, M",
        "C, A",
        "D, B",
        "D, C",
        "D, D",
        "D, E",
        "D, H",
        "D, L",
        "D, M",
        "D, A",
        "E, B",
        "E, C",
        "E, D",
        "E, E",
        "E, H",
        "E, L",
        "E, M",
        "E, A",
        "H, B",
        "H, C",
        "H, D",
        "H, E",
        "H, H",
        "H, L",
        "H, M",
        "H, A",
        "L, B",
        "L, C",
        "L, D",
        "L, E",
        "L, H",
        "L, L",
        "L, M",
        "L, A",
        "M, B",
        "M, C",
        "M, D",
        "M, E",
        "M, H",
        "M, L",
        "",
        "M, A",
        "A, B",
        "A, C",
        "A, D",
        "A, E",
        "A, H",
        "A, L",
        "A, M",
        "A, A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "B",
        "C",
        "D",
        "E",
        "H",
        "L",
        "M",
        "A",
        "",
        "B",
        "wwww",
        "wwww",
        "wwww",
        "B",
        "bb",
        "0",
        "",
        "",
        "wwww",
        "wwww",
        "wwww",
        "wwww",
        "bb",
        "1",
        "",
        "D",
        "wwww",
        "bb",
        "wwww",
        "D",
        "bb",
        "2",
        "",
        "",
        "wwww",
        "bb",
        "wwww",
        "wwww",
        "bb",
        "3",
        "",
        "H",
        "wwww",
        "",
        "wwww",
        "H",
        "bb",
        "4",
        "",
        "",
        "wwww",
        "",
        "wwww",
        "wwww",
        "bb",
        "5",
        "",
        "PSW",
        "wwww",
        "",
        "wwww",
        "PSW",
        "bb",
        "6",
        "",
        "",
        "wwww",
        "",
        "wwww",
        "wwww",
        "bb",
        "7"
    };

    const byte instructionLengths[] = {
        1,
        3,
        1,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        1,
        3,
        1,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        1,
        3,
        3,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        3,
        1,
        1,
        1,
        2,
        1,
        1,
        3,
        3,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        3,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        1,
        2,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        2,
        1,
        1,
        1,
        3,
        2,
        3,
        1,
        2,
        1,
        1,
        1,
        3,
        2,
        3,
        3,
        2,
        1,
        1,
        1,
        3,
        1,
        3,
        1,
        2,
        1,
        1,
        1,
        3,
        1,
        3,
        3,
        2,
        1,
        1,
        1,
        3,
        1,
        3,
        1,
        2,
        1,
        1,
        1,
        3,
        1,
        3,
        3,
        2,
        1
    };

    std::string formatInstructionArguments(byte opCode, byte byte2, byte byte3)
    {   
        std::size_t pos = arguments[opCode].find("bb", 0);
        if (pos != std::string::npos)
        {
            std::string argumentString(arguments[opCode]);
            argumentString.replace(pos, 2, toHexString(byte2));
            return argumentString;
        }

        pos = arguments[opCode].find("wwww", 0);
        if (pos != std::string::npos)
        {
            word value = (static_cast<word>(byte3) << 8) | byte2;

            std::string argumentString(arguments[opCode]);
            argumentString.replace(pos, 4, toHexString(value));
            return argumentString;
        }

        return arguments[opCode];
    }
} // namespace emulator
